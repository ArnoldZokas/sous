#!/usr/bin/env bash

# This script relies on fswatch (you can get that using homebrew)
#
# It watches the local working directory for changes, and invokes
# scripts/install-dev on each change to enable rapid development.
#
# So you don't need to look, it verbally announces the last line
# of the invoked script; turn your sound on ;)

s() { say -v Amelie "$@" & }
fin() { s "Bye!"; echo; exit 0; }
say -v Amelie "Bon jour!" 
#declare -g CHANGES
build() {
	afplay -v 0.5 /System/Library/Sounds/Glass.aiff &
	if [ -z "$1" ]; then
		CHANGED_FILES="No changes."
	else
		CHANGED_FILES="Changed files: $1"
	fi
	if result=$(./scripts/install-dev); then
		s "Sous OK!"
		terminal-notifier -title "Sous OK" -message "$CHANGED_FILES" &
	else
		s "Non!"
		terminal-notifier -title "Sous Build Failed!" -message "$CHANGED_FILES" &
	fi
	#s $(echo "$result" | tail -n1)
	echo "$result"
}
trap fin SIGINT SIGTERM
echo "Building current version..."
build
echo
while true; do
	CHANGES=""
	echo "Waiting for changes..."
	# The { ... } section is calles "command grouping" it creates a subshell
	# which means the while loop isn't directly part of a pipeline and
	# therefore doesn't create its own subshell, allowing the CHANGES var
	# to be shared inside and outside the loop. This is POSIX-compatible.
	fswatch -1ri '\.go$' -e '.*' . |
	{
		while read x; do
			CF="${x#$PWD/}"
			echo "Changed: $CF"
			CHANGES="$CHANGES$CF "
		done
		echo "CHANGES: $CHANGES"
		build "$CHANGES"
		echo
	}
done

